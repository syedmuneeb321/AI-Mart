name: ai-mart-platform

services:
  product-service:
    image: product-mart-api
    build:
      context: ./product-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product-service:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_product_db
    ports:
      - "8005:8000" # Expose container port 8000 to host port 8000

  user-service:
    image: user-mart-api
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./user-service:/code # Sync local development directory with the container
    depends_on:
      - broker
      - postgres_user_db
    ports:
      - "8000:8000" # Expose container port 8000 to host port 8000

  order-service:
    image: order-mart-api 
    build:
      context: ./order-service 
      dockerfile: Dockerfile.dev 
    container_name: OrderCont 
    ports:
      - "8003:8000"
    depends_on:
      - broker 
      - postgres_order_db
    volumes:
      - ./order-service:/code 
  
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile.dev
    container_name: inventoryCont
    ports:
      - "8007:8000"
    depends_on:
      - broker 
      - postgres_inventory_db
    volumes:
      - ./inventory-service:/code
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile.dev 
    container_name: PaymentCont 
    ports:
      - "8008:8000"
    depends_on:
      - broker 
      - postgres_payment_db
    
    volumes:
      - ./payment-service:/code

    
  



  postgres_product_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresProductsCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5481:5432"
    volumes:
      - postgres_product_db:/var/lib/postgresql/data

  postgres_user_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresUserCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5482:5432"
    volumes:
      - postgres_user_db:/var/lib/postgresql/data

  postgres_order_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresOrderCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5483:5432"
    volumes:
      - postgres_order_db:/var/lib/postgresql/data

  postgres_inventory_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresInventoryCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5484:5432"
    
    volumes:
      - "postgres_inventory_db:/var/lib/postgresql/data"

  postgres_payment_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: PostgresPaymentCont
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=mydatabase
    ports:
      - "5485:5432"
    
    volumes:
      - "postgres_payment_db:/var/lib/postgresql/data"
    
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_LISTENERS: "CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "Local Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:19092"
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

volumes:
  postgres_user_db:
    driver: local
  postgres_product_db:
    driver: local
  postgres_order_db:
    driver: local

  postgres_inventory_db:
    driver: local
  postgres_payment_db:
    driver: local
networks:
  default:
    driver: bridge
